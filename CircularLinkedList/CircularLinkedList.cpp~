#include <iostream>
#include <fstream>
#include "CircularLinkedList.h"

using namespace std;

CircularLinkedList::CircularLinkedList() {
    head = nullptr;
    length = 0;
}

CircularLinkedList::~CircularLinkedList() {
    NodeType *temp;
    if (length == 0) {
	return;
    }
    
    for (int i = 0; i < length; i++) {
	temp = head;
	if (temp->next == nullptr) {
	    head = nullptr;
	}

	else {
	    head = head->next;
	}
	delete temp;
    }
}

void CircularLinkedList::insertItem(ItemType &item) {
    NodeType *newNode = new NodeType;
    newNode->data = item;
    newNode->next = nullptr;
    NodeType *current = head;
    NodeType *predLoc = head;
    bool duplicateFound = false;
    bool moreToSearch = true;
    
    if (head == nullptr) {
    	head = newNode;
    	newNode->next = newNode;
    	current = head->next;
	length++;
    	return;
    }
    
    else {
	while (moreToSearch && !duplicateFound) {
	    if (item.compareTo(current->data) == LESS) {
		moreToSearch = false;
		cout << "input" << endl;
	    }

	    else if (item.compareTo(current->data) == EQUAL) {
		cout << "Item already exists" << endl;
		duplicateFound = true;
		delete newNode;
		break;
	    }

	    else {
		cout << "output" << endl;
		predLoc = current;
		current = current->next;
		moreToSearch = (current != head->next);
		break;
	    }
	}
	if (head->data.compareTo(item) == LESS) {
	    head = newNode;
	    cout << "does this work?" << endl;
	}
	newNode->next = predLoc->next;
	predLoc->next = newNode;
	cout << "about to increase length" << endl;
	length++;
    }

    if (!duplicateFound) {
	predLoc->next = newNode;
	newNode->next = head;
	head = newNode;
	length++;
    }
}

void CircularLinkedList::deleteItem(ItemType &item) {
    NodeType *predLoc = head;
    NodeType *current = head->next;
    // bool found = false;
    bool duplicateFound = false;
    bool moreToSearch = current != nullptr;

    if (current == nullptr) {
    	cout << "Delete invalid" << endl;
    	return;
    }

    if (length == 0) {
	cout << "You cannot delete from an empty list." << endl;
	return;
    }

    // if (item.compareTo(current->data) == EQUAL) {
    // 	head = current->next;
    // 	length--;
    // 	delete current;
    // 	return;
    // }

    while (moreToSearch && !duplicateFound) {
	if (item.compareTo(current->data) == LESS) {
	    moreToSearch = false;
	}

	else if (item.compareTo(current->data) == EQUAL) {
	    cout << "Item already exists" << endl;
	    duplicateFound = true;
	    break;
	}

	else {
	    predLoc = current;
	    current = current->next;
	    moreToSearch = (current != head->next);
	    break;
	}
    }

    if (!duplicateFound) {
    	cout << "Item not in list!" << endl;
    	return;
    }

    if (predLoc == current) {
	head = nullptr;
    }

    else {
	predLoc->next = current->next;
	if (current == head) {
	    head = predLoc;
	}
    }
    delete current;
    length--;
}

int CircularLinkedList::lengthIs() const {
    return length;
}

void CircularLinkedList::print() {
    NodeType *temp;
    
    if (length == 0) {
    	cout << "Empty" << endl;
	return;
    }

    else {
	temp = head->next;
    }
    
    if (head == nullptr) {
    	cout << "Delete invalid" << endl;
    	return;
    }
    
    do {
    	cout << temp->data.getValue() << " ";
	temp = temp->next;
    }
    
    while (temp != head->next);

    cout << endl;
}
